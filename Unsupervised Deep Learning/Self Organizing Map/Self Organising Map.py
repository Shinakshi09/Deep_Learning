# -*- coding: utf-8 -*-
"""SOM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Qd72k2xntZ0F49e8zn4ox9IOZcnWwTBk

#Self Organizing Map Unsupervised Algorithms
"""

"""
Installing the libraries

"""
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""
Importing the Dataset

"""


dataset = pd.read_csv('Credit_Card_Applications.csv')
X = dataset.iloc[:, :-1].values 
y = dataset.iloc[:, -1].values

"""

Feature Scaling

"""

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler(feature_range = (0,1))
X = sc.fit_transform(X)

"""##Training the SOM"""

"""



Self Organising Map


Here X and Y are dimensions which we can choose as per our understanding but make sure it should not be very small

In outliers are present in the dataset.

input_len : Corresponds to number of features in the Dataset, Remember I am dropping a column here hence 15 instead of 16


Sigma :  It is the radius 

learning_Rate : Is the Learning rate


"""


from minisom import MiniSom
som = MiniSom(x=10, y=10, input_len= 15, sigma= 1.0, learning_rate = 0.5)
som.random_weights_init(X)
som.train_random(data = X, num_iteration = 100)

"""
Visualize the result

"""

from pylab import bone, pcolor, colorbar, plot, show
bone()
pcolor(som.distance_map().T)
colorbar()
markers = ['o', 's']
colors = ['r', 'g']
for i, x in enumerate(X):
    w = som.winner(x)
    plot(w[0] + 0.5,
         w[1] + 0.5,
         markers[y[i]],
         markeredgecolor = colors[y[i]],
         markerfacecolor = 'None',
         markersize = 10,
         markeredgewidth = 2)
show()

"""

Let's find the frauds

"""


mappings = som.win_map(X)
frauds = np.concatenate((mappings[(1,1)], mappings[(4,1)]), axis = 0)
frauds = sc.inverse_transform(frauds)

"""

Finding the Fraud customer
"""



print('Fraud Customer IDs')
for i in frauds[:, 0]:
  print(int(i))

